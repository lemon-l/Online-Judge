'''
Input
    输入描述:
    　　由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。
    　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。
    　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。
    　　最后将C输出即可。
    输入样例:
    20100122201001221234567890
    2010012220100122

Output
    输出描述:
        输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。
        输出样例:
        20100122203011233454668012
        
'''

'''
# 这道题做的时候遇到了一些困难，开始的时候忘记了列表后面有默认的一个空元素，但是测试题中的数据是正确的，之后把相加的位置调整了一下，
# 就OK了，但是还是时间复杂度有点高，所以没有成功

可以测试以下的数据：
    987654321987654321 
    987654321987654321
    1975308643975308642

    9999999999999999999 
    9
    100000000000000000008
    10000000000000000008
'''

a = input()
b = input()

list1 = []
list2 = []
list3 = []
s = ''
r = 0

for i in range(len(a)):
    list1.append(a[len(a) - i - 1])

for j in range(len(b)):
    list2.append(b[len(b) - j - 1])

# 判断哪个列表长
if(len(a) > len(b)):
    for i in range(len(b), len(a)):
        list2.append('0')
elif(len(a) < len(b)):
    for i in range(len(a), len(b)):
        list1.append('0')
  
for m in range(len(list2)):
    c = int(list1[m]) + int(list2[m]) + r
    if(c >= 10):
        list3.append(c % 10)
        r = c // 10
    else:
        list3.append(c)
        r = 0
if(r != 0):
    list3.append(r)

for n in range(len(list3)):
        s += str(list3[n])

if(list3[-1] != '0'):
    print(s[::-1])    
else:
    print(s[::-2])

